(define cops-called false)
(define (call-the-cops)
  (set! cops-called true))

(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define failure 0)
  (define (dispatch p m)
    (if (eq? p password)
      (begin
        (set! failure 0)
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else
                (error "Unknown request: MAKE-ACCOUNT" m))))
      (begin
        (set! failure (+ failure 1))
        (if (>= failure 7) (call-the-cops))
        (lambda (x) "Incorrect password"))))
  dispatch)

(begin
  (define acc (make-account 100 'secret-password))
  (assert (= ((acc 'secret-password 'withdraw) 40) 60))
  (assert (equal? ((acc 'some-other-password 'deposit) 50) "Incorrect password"))
  (assert (equal? ((acc 'some-other-password 'deposit) 50) "Incorrect password"))
  (assert (equal? ((acc 'some-other-password 'deposit) 50) "Incorrect password"))
  (assert (equal? ((acc 'some-other-password 'deposit) 50) "Incorrect password"))
  (assert (equal? ((acc 'some-other-password 'deposit) 50) "Incorrect password"))
  (assert (equal? ((acc 'some-other-password 'deposit) 50) "Incorrect password"))
  (assert (not cops-called))
  (assert (equal? ((acc 'some-other-password 'deposit) 50) "Incorrect password"))
  (assert cops-called))
